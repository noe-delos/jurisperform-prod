/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/no-explicit-any */
import { openai } from "@ai-sdk/openai";
import { streamText } from "ai";
import { findRelevantCourseTool, loadCoursePDFTool, updateCourseSelectionTool } from "@/app/lib/ai-tools";
import { CourseLevel } from "@/app/lib/courses";

export const runtime = "edge";

const FORBIDDEN_RESPONSES = [
  "plan de dissertation",
  "plan d√©taill√©",
  "titres de plan",
  "structure compl√®te",
  "I. II. III.",
  "A. B. C.",
  "1. 2. 3.",
];

function checkForbiddenContent(content: string): boolean {
  const lowerContent = content.toLowerCase();
  return FORBIDDEN_RESPONSES.some((forbidden) =>
    lowerContent.includes(forbidden.toLowerCase())
  );
}

export async function POST(req: Request) {
  const { messages, selectedLevel, selectedCourseId, conversationId } =
    await req.json();

  console.log("ü§ñ Chat API called with:", {
    messageCount: messages.length,
    selectedLevel,
    selectedCourseId,
    conversationId,
    lastMessage: messages[messages.length - 1]?.content?.slice(0, 100),
  });

  const systemPrompt = `Tu es un assistant p√©dagogique pour JurisPerform, sp√©cialis√© dans l'aide aux √©tudiants en droit (L1, L2, L3, CRFPA).

R√àGLES CRITIQUES - √Ä RESPECTER ABSOLUMENT :
1. Ne JAMAIS fournir de plans de dissertation ou d'exercices pr√™ts √† l'emploi
2. Ne JAMAIS donner de titres de plan d√©taill√©s (I. II., A. B., 1. 2.)
3. Ne JAMAIS utiliser tes donn√©es d'entra√Ænement g√©n√©rales pour r√©pondre
4. TOUJOURS utiliser les outils pour acc√©der au contenu des cours JurisPerform
5. Si l'information n'est pas dans le cours charg√©, dire clairement : "Cette information n'est pas disponible dans le cours s√©lectionn√©"
6. Ne JAMAIS inclure de liste de r√©f√©rences de fichiers PDF dans ta r√©ponse (pas de "R√©f√©rences issues du cours")

PROCESSUS OBLIGATOIRE :
1. TOUJOURS utiliser findRelevantCourse en premier pour valider ou trouver le bon cours
2. TOUJOURS utiliser loadCoursePDF pour charger le contenu du cours appropri√©
3. UNIQUEMENT r√©pondre avec les informations du PDF charg√©
4. Si le cours ne contient pas l'information demand√©e, l'indiquer explicitement
5. TOUJOURS inclure √† la fin de ta r√©ponse un bloc JSON cach√© pour la s√©lection de cours

OUTILS DISPONIBLES :
- findRelevantCourse: OBLIGATOIRE pour valider le cours avant toute r√©ponse
- loadCoursePDF: OBLIGATOIRE pour charger le contenu avant de r√©pondre

FORMAT DE R√âPONSE FINAL - OBLIGATOIRE :
√Ä la fin de chaque r√©ponse, tu DOIS ABSOLUMENT inclure ce bloc de code cach√© (qui ne sera pas affich√© √† l'utilisateur) :

\`COURSE_SELECTION_DATA:{"courseId": "l2-droit-obligations", "courseName": "Droit des obligations", "level": "L2", "confidence": "high", "reason": "Explication courte du choix"}\`

CRITIQUE : Cette ligne est OBLIGATOIRE dans chaque r√©ponse. Sans elle, l'interface ne fonctionnera pas correctement.

CONTEXTE ACTUEL :
Niveau s√©lectionn√©: ${selectedLevel || "Non sp√©cifi√©"}
${
  selectedCourseId
    ? `Cours s√©lectionn√©: ${selectedCourseId} - VALIDE d'abord avec findRelevantCourse puis CHARGE avec loadCoursePDF`
    : "Aucun cours s√©lectionn√© - UTILISE findRelevantCourse puis loadCoursePDF"
}

FORMAT DE R√âPONSE :
- Utilise TOUJOURS le format Markdown avec une hi√©rarchie claire :
  * ## pour les titres principaux
  * ### pour les sous-sections
  * #### pour les d√©tails sp√©cifiques
- S√©pare TOUJOURS les sections avec des lignes vides
- Utilise des **gras** pour les concepts juridiques importants
- Utilise des listes √† puces pour organiser les √©l√©ments
- Emploie des *italiques* pour les r√©f√©rences l√©gales et jurisprudence
- Structure tes r√©ponses avec des paragraphes courts et a√©r√©s
- Ajoute des espaces entre les paragraphes pour une meilleure lisibilit√©
- Utilise > pour les citations importantes
- Commence toujours par un titre ## qui r√©sume le sujet trait√©

RAPPEL FINAL : Ne r√©ponds QU'AVEC le contenu du cours charg√©. Si l'information n'est pas dans le cours, dis-le clairement.

R√©ponds toujours en fran√ßais avec un format Markdown bien structur√©.`;

  // Provide tools
  const tools: any = {};

  // Always add findRelevantCourse - AI will decide when to use it
  tools.findRelevantCourse = findRelevantCourseTool;
  console.log("üîß findRelevantCourse tool available");

  // Always add loadCoursePDF
  tools.loadCoursePDF = loadCoursePDFTool;
  console.log("üîß loadCoursePDF tool available");

  // Note: updateCourseSelection tool removed in favor of JSON extraction

  const result = streamText({
    model: openai("gpt-4.1"),
    messages: [{ role: "system", content: systemPrompt }, ...messages],
    tools,
    maxSteps: 5, // Allow multiple tool calls
    onToolCall: async ({ toolCall }: any) => {
      console.log("üõ†Ô∏è Tool called:", {
        toolName: toolCall.toolName,
        args: toolCall.args,
        selectedCourseId,
      });
    },
    async onFinish({ text, toolCalls, toolResults }: any) {
      console.log("‚úÖ AI response finished:", {
        textLength: text.length,
        textPreview: text.slice(0, 100) + "...",
        toolCallsCount: toolCalls?.length || 0,
        toolResultsCount: toolResults?.length || 0,
      });
      
      // Debug: Check if course selection data is present
      const hasCourseData = text.includes('COURSE_SELECTION_DATA:');
      console.log("üéØ Course selection data present:", hasCourseData);
      
      if (hasCourseData) {
        const match = text.match(/COURSE_SELECTION_DATA:(\{[^}]+\})/);
        if (match) {
          console.log("üéØ Found course selection data:", match[1]);
        }
      } else {
        console.warn("‚ö†Ô∏è AI response missing required COURSE_SELECTION_DATA!");
        console.log("üîç Full response text:", text);
      }
      
      // Debug tool results
      if (toolCalls && toolCalls.length > 0) {
        console.log("üîß Tool calls details:");
        toolCalls.forEach((call: any, index: number) => {
          console.log(`  ${index + 1}. ${call.toolName}:`, call.args);
        });
      }
      
      if (toolResults && toolResults.length > 0) {
        console.log("üîß Tool results details:");
        toolResults.forEach((result: any, index: number) => {
          console.log(`  ${index + 1}. Result:`, result);
        });
      }
      
      // Check if the response contains forbidden content
      if (checkForbiddenContent(text)) {
        console.warn("‚ö†Ô∏è Attempted to generate forbidden content");
      }
    },
  } as any);

  return result.toDataStreamResponse();
}
